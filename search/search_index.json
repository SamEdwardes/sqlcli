{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"sqlcli A command line interface (CLI) for interacting with SQLModel. Source code: https://github.com/SamEdwardes/sqlcli Docs: https://samedwardes.github.io/sqlcli/ PyPi: not yet published Installation You can install sqlcli using pip: pip install sqlcli This will make the sqlcli command available in your python environment. Usage The quickest way to get started with sqlcli is to create a demo sqlite database: sqlcli init-demo This will create a small sqlite database on your computer. The you can use sqlcli to explore your database. sqlcli select user --database-url \"sqlite:///demo_database.db\" --models-module \"demo_models.py\"","title":"Home"},{"location":"#sqlcli","text":"A command line interface (CLI) for interacting with SQLModel. Source code: https://github.com/SamEdwardes/sqlcli Docs: https://samedwardes.github.io/sqlcli/ PyPi: not yet published","title":"sqlcli"},{"location":"#installation","text":"You can install sqlcli using pip: pip install sqlcli This will make the sqlcli command available in your python environment.","title":"Installation"},{"location":"#usage","text":"The quickest way to get started with sqlcli is to create a demo sqlite database: sqlcli init-demo This will create a small sqlite database on your computer. The you can use sqlcli to explore your database. sqlcli select user --database-url \"sqlite:///demo_database.db\" --models-module \"demo_models.py\"","title":"Usage"},{"location":"changelog/","text":"Changelog 0.0.1 (2022-01-01) The first release of sqlcli .","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#001-2022-01-01","text":"The first release of sqlcli .","title":"0.0.1 (2022-01-01)"},{"location":"contributing/","text":"Contributing Docs The docs are hosted on GitHub pages at: https://samedwardes.github.io/sqlcli/ . When making changes remember to do the following: Rebuild the API reference. typer sqlcli.main utils docs --output docs/api/_typer-cli-auto-docs.md Check how the docs look locally. mkdocs serve Publish to GitHub pages. mkdocs gh-deploy --force Credits Open source libraries Like all great open source software sqlcli is built on the shoulders of giants. sqlcli relies heavily on: sqlmodel sqlalchemy typer rich mkdocs-material and many more! See the pyproject.toml for all requirements. Icons and logo Icons are from fontawesome.com . The logo is the terminal icon .","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#docs","text":"The docs are hosted on GitHub pages at: https://samedwardes.github.io/sqlcli/ . When making changes remember to do the following: Rebuild the API reference. typer sqlcli.main utils docs --output docs/api/_typer-cli-auto-docs.md Check how the docs look locally. mkdocs serve Publish to GitHub pages. mkdocs gh-deploy --force","title":"Docs"},{"location":"contributing/#credits","text":"","title":"Credits"},{"location":"contributing/#open-source-libraries","text":"Like all great open source software sqlcli is built on the shoulders of giants. sqlcli relies heavily on: sqlmodel sqlalchemy typer rich mkdocs-material and many more! See the pyproject.toml for all requirements.","title":"Open source libraries"},{"location":"contributing/#icons-and-logo","text":"Icons are from fontawesome.com . The logo is the terminal icon .","title":"Icons and logo"},{"location":"api/_typer-cli-auto-docs/","text":"CLI A command line interface (CLI) for interacting with SQLModel. Usage : $ [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. drop-all : Drop a database. init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. select : Query the database. create-all Create a database. Usage : $ create-all [ OPTIONS ] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit. drop-all Drop a database. Usage : $ drop-all [ OPTIONS ] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit. init-demo Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Usage : $ init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database [default: .] --instructions / --no-instructions : Print the instructions on how to use the demo database. [default: False] --help : Show this message and exit. insert Insert a new record into the database. Usage : $ insert [ OPTIONS ] [ TABLE ] Arguments : [TABLE] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit. select Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] . Usage : $ select [ OPTIONS ] [ TABLE ] Arguments : [TABLE] : The name of the table to query. Options : --n INTEGER : The number of database rows to query. [default: 10] --format TEXT : The format to output the data. Should be one of [None, 'json', 'dict', 'table'] [default: table] --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"CLI"},{"location":"api/_typer-cli-auto-docs/#cli","text":"A command line interface (CLI) for interacting with SQLModel. Usage : $ [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. drop-all : Drop a database. init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. select : Query the database.","title":"CLI"},{"location":"api/_typer-cli-auto-docs/#create-all","text":"Create a database. Usage : $ create-all [ OPTIONS ] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"create-all"},{"location":"api/_typer-cli-auto-docs/#drop-all","text":"Drop a database. Usage : $ drop-all [ OPTIONS ] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"drop-all"},{"location":"api/_typer-cli-auto-docs/#init-demo","text":"Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Usage : $ init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database [default: .] --instructions / --no-instructions : Print the instructions on how to use the demo database. [default: False] --help : Show this message and exit.","title":"init-demo"},{"location":"api/_typer-cli-auto-docs/#insert","text":"Insert a new record into the database. Usage : $ insert [ OPTIONS ] [ TABLE ] Arguments : [TABLE] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"insert"},{"location":"api/_typer-cli-auto-docs/#select","text":"Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] . Usage : $ select [ OPTIONS ] [ TABLE ] Arguments : [TABLE] : The name of the table to query. Options : --n INTEGER : The number of database rows to query. [default: 10] --format TEXT : The format to output the data. Should be one of [None, 'json', 'dict', 'table'] [default: table] --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"select"},{"location":"api/api-reference/","text":"API Reference A command line interface (CLI) for interacting with SQLModel. Usage : $ [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. drop-all : Drop a database. init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. select : Query the database. create-all Create a database. Usage : $ create-all [ OPTIONS ] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit. drop-all Drop a database. Usage : $ drop-all [ OPTIONS ] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit. init-demo Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Usage : $ init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database [default: .] --instructions / --no-instructions : Print the instructions on how to use the demo database. [default: False] --help : Show this message and exit. insert Insert a new record into the database. Usage : $ insert [ OPTIONS ] [ TABLE ] Arguments : [TABLE] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit. select Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] . Usage : $ select [ OPTIONS ] [ TABLE ] Arguments : [TABLE] : The name of the table to query. Options : --n INTEGER : The number of database rows to query. [default: 10] --format TEXT : The format to output the data. Should be one of [None, 'json', 'dict', 'table'] [default: table] --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"API Reference"},{"location":"api/api-reference/#api-reference","text":"A command line interface (CLI) for interacting with SQLModel. Usage : $ [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. drop-all : Drop a database. init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. select : Query the database.","title":"API Reference"},{"location":"api/api-reference/#create-all","text":"Create a database. Usage : $ create-all [ OPTIONS ] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"create-all"},{"location":"api/api-reference/#drop-all","text":"Drop a database. Usage : $ drop-all [ OPTIONS ] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"drop-all"},{"location":"api/api-reference/#init-demo","text":"Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Usage : $ init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database [default: .] --instructions / --no-instructions : Print the instructions on how to use the demo database. [default: False] --help : Show this message and exit.","title":"init-demo"},{"location":"api/api-reference/#insert","text":"Insert a new record into the database. Usage : $ insert [ OPTIONS ] [ TABLE ] Arguments : [TABLE] Options : --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"insert"},{"location":"api/api-reference/#select","text":"Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] . Usage : $ select [ OPTIONS ] [ TABLE ] Arguments : [TABLE] : The name of the table to query. Options : --n INTEGER : The number of database rows to query. [default: 10] --format TEXT : The format to output the data. Should be one of [None, 'json', 'dict', 'table'] [default: table] --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . --help : Show this message and exit.","title":"select"},{"location":"tutorial/getting-started/","text":"Installation and Getting Started Installation ....","title":"Installation and Getting Started"},{"location":"tutorial/getting-started/#installation-and-getting-started","text":"","title":"Installation and Getting Started"},{"location":"tutorial/getting-started/#installation","text":"....","title":"Installation"},{"location":"tutorial/using-demo-db/","text":"Using the demo database To work with the demo database first make sure you have run the command: sqlcli init-demo This will create a new sqlite database on your computer that you can then use to test sqlcli . Next you need to create a python module that contains the SQLModels. Create a new file named models.py . touch models.py Then copy and paste the following code into models.py : from typing import List , Optional from sqlmodel import Field , Relationship , SQLModel class Sport ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str athletes : List [ \"Athlete\" ] = Relationship ( back_populates = \"sport\" ) class Athlete ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str sport_id : Optional [ int ] = Field ( default = None , foreign_key = \"sport.id\" ) sport : Optional [ Sport ] = Relationship ( back_populates = \"athletes\" ) Now with your database in place and your models defined you will be able to play with sqlcli ! sqlcli select sport sqlcli select athlete sqlcli insert","title":"Using demo db"},{"location":"tutorial/using-demo-db/#using-the-demo-database","text":"To work with the demo database first make sure you have run the command: sqlcli init-demo This will create a new sqlite database on your computer that you can then use to test sqlcli . Next you need to create a python module that contains the SQLModels. Create a new file named models.py . touch models.py Then copy and paste the following code into models.py : from typing import List , Optional from sqlmodel import Field , Relationship , SQLModel class Sport ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str athletes : List [ \"Athlete\" ] = Relationship ( back_populates = \"sport\" ) class Athlete ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str sport_id : Optional [ int ] = Field ( default = None , foreign_key = \"sport.id\" ) sport : Optional [ Sport ] = Relationship ( back_populates = \"athletes\" ) Now with your database in place and your models defined you will be able to play with sqlcli ! sqlcli select sport sqlcli select athlete sqlcli insert","title":"Using the demo database"}]}