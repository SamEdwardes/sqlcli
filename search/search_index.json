{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"sqlcli A command line interface (CLI) for interacting with SQLModel. Source code: https://github.com/SamEdwardes/sqlcli Docs: https://samedwardes.github.io/sqlcli/ PyPi: https://pypi.org/project/sqlcli/ Features The key features are: Read data using the sqlcli select command. Insert data using the sqlcli insert command. Interactive console powered by typer , rich , and sqlmodel . Pretty terminal outputs generated by rich . Multiple output formats including rich , json, and python dictionaries. Installation You can install sqlcli using pip: pip install sqlcli This will make the sqlcli command available in your python environment. Usage The quickest way to get started with sqlcli is to create a demo sqlite database: sqlcli init-demo This will create a small sqlite database on your computer. The you can use sqlcli to explore your database. View your table by using the select command. sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 name \u2503 sport_id \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 Ronaldo \u2502 1 \u2502 \u2502 2 \u2502 Messi \u2502 1 \u2502 \u2502 3 \u2502 Beckham \u2502 1 \u2502 \u2502 4 \u2502 Gretzky \u2502 2 \u2502 \u2502 5 \u2502 Crosby \u2502 2 \u2502 \u2502 6 \u2502 Ovechkin \u2502 2 \u2502 \u2502 7 \u2502 Sundin \u2502 2 \u2502 \u2502 8 \u2502 Domi \u2502 2 \u2502 \u2502 9 \u2502 Carter \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Home"},{"location":"#sqlcli","text":"A command line interface (CLI) for interacting with SQLModel. Source code: https://github.com/SamEdwardes/sqlcli Docs: https://samedwardes.github.io/sqlcli/ PyPi: https://pypi.org/project/sqlcli/","title":"sqlcli"},{"location":"#features","text":"The key features are: Read data using the sqlcli select command. Insert data using the sqlcli insert command. Interactive console powered by typer , rich , and sqlmodel . Pretty terminal outputs generated by rich . Multiple output formats including rich , json, and python dictionaries.","title":"Features"},{"location":"#installation","text":"You can install sqlcli using pip: pip install sqlcli This will make the sqlcli command available in your python environment.","title":"Installation"},{"location":"#usage","text":"The quickest way to get started with sqlcli is to create a demo sqlite database: sqlcli init-demo This will create a small sqlite database on your computer. The you can use sqlcli to explore your database. View your table by using the select command. sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 name \u2503 sport_id \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 Ronaldo \u2502 1 \u2502 \u2502 2 \u2502 Messi \u2502 1 \u2502 \u2502 3 \u2502 Beckham \u2502 1 \u2502 \u2502 4 \u2502 Gretzky \u2502 2 \u2502 \u2502 5 \u2502 Crosby \u2502 2 \u2502 \u2502 6 \u2502 Ovechkin \u2502 2 \u2502 \u2502 7 \u2502 Sundin \u2502 2 \u2502 \u2502 8 \u2502 Domi \u2502 2 \u2502 \u2502 9 \u2502 Carter \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Usage"},{"location":"api-reference/","text":"API Reference A command line interface (CLI) for interacting with SQLModel. Usage : $ sqlcli [ OPTIONS ] COMMAND [ ARGS ] ... Options : --version : Show the installed version. [default: False] --install-completion [bash|zsh|fish|powershell|pwsh] : Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] : Show completion for the specified shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. docs : Opens the docs. drop-all : Drop a database. init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. inspect : Inspect a SQLModel with rich.inspect . select : Query the database. sqlcli create-all Create a database. The equivalent to calling SQLModel.metadata.create_all(engine) . Usage : $ sqlcli create-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit. sqlcli docs Opens the docs. Open the docs using you default browser https://samedwardes.github.io/sqlcli/ . Usage : $ sqlcli docs [ OPTIONS ] Options : --help : Show this message and exit. sqlcli drop-all Drop a database. The equivalent to calling SQLModel.metadata.drop_all(engine) . Usage : $ sqlcli drop-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -y : Danger! Skip the prompt and drop the database. This cannot be undone. [default: False] --help : Show this message and exit. sqlcli init-demo Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Calling this command will create two new files: ./sqlcli_demo/database.db : a sqlite data populated with a small amount of data. ./sqlcli_demo/models.py : a python module with SQLModel classes. These files can used to test sqlcli without connecting to your own database. Once you are done with the demo files they can be deleted by calling sqlcli init-demo --clear . Usage : $ sqlcli init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database. [default: sqlcli_demo] --clear / --no-clear : Remove all of the demo database related data including sqlcli_demo/models.py and sqlcli_demo/database.db . [default: False] --help : Show this message and exit. sqlcli insert Insert a new record into the database. Insert new rows into the database. Calling sqlcli insert is similar to calling INSERT INTO [table] in sql. Usage : $ sqlcli insert [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. If no name is provided the interactive promptwill ask for a table name. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit. sqlcli inspect Inspect a SQLModel with rich.inspect . Usage : $ sqlcli inspect [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. If no name is provided the interactive promptwill ask for a table name. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit. sqlcli select Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] in sql. Usage : $ sqlcli select [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. If no name is provided the interactive promptwill ask for a table name. Options : -n, --number-rows INTEGER : The number of database rows to query. [default: 10] -f, --format TEXT : The format to output the data. Should be one of ['table', 'json', 'dict']. [default: table] -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -v, --verbose : Show a more verbose output. [default: False] --help : Show this message and exit.","title":"API Reference"},{"location":"api-reference/#api-reference","text":"A command line interface (CLI) for interacting with SQLModel. Usage : $ sqlcli [ OPTIONS ] COMMAND [ ARGS ] ... Options : --version : Show the installed version. [default: False] --install-completion [bash|zsh|fish|powershell|pwsh] : Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] : Show completion for the specified shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. docs : Opens the docs. drop-all : Drop a database. init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. inspect : Inspect a SQLModel with rich.inspect . select : Query the database.","title":"API Reference"},{"location":"api-reference/#sqlcli-create-all","text":"Create a database. The equivalent to calling SQLModel.metadata.create_all(engine) . Usage : $ sqlcli create-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit.","title":"sqlcli create-all"},{"location":"api-reference/#sqlcli-docs","text":"Opens the docs. Open the docs using you default browser https://samedwardes.github.io/sqlcli/ . Usage : $ sqlcli docs [ OPTIONS ] Options : --help : Show this message and exit.","title":"sqlcli docs"},{"location":"api-reference/#sqlcli-drop-all","text":"Drop a database. The equivalent to calling SQLModel.metadata.drop_all(engine) . Usage : $ sqlcli drop-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -y : Danger! Skip the prompt and drop the database. This cannot be undone. [default: False] --help : Show this message and exit.","title":"sqlcli drop-all"},{"location":"api-reference/#sqlcli-init-demo","text":"Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Calling this command will create two new files: ./sqlcli_demo/database.db : a sqlite data populated with a small amount of data. ./sqlcli_demo/models.py : a python module with SQLModel classes. These files can used to test sqlcli without connecting to your own database. Once you are done with the demo files they can be deleted by calling sqlcli init-demo --clear . Usage : $ sqlcli init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database. [default: sqlcli_demo] --clear / --no-clear : Remove all of the demo database related data including sqlcli_demo/models.py and sqlcli_demo/database.db . [default: False] --help : Show this message and exit.","title":"sqlcli init-demo"},{"location":"api-reference/#sqlcli-insert","text":"Insert a new record into the database. Insert new rows into the database. Calling sqlcli insert is similar to calling INSERT INTO [table] in sql. Usage : $ sqlcli insert [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. If no name is provided the interactive promptwill ask for a table name. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit.","title":"sqlcli insert"},{"location":"api-reference/#sqlcli-inspect","text":"Inspect a SQLModel with rich.inspect . Usage : $ sqlcli inspect [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. If no name is provided the interactive promptwill ask for a table name. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit.","title":"sqlcli inspect"},{"location":"api-reference/#sqlcli-select","text":"Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] in sql. Usage : $ sqlcli select [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. If no name is provided the interactive promptwill ask for a table name. Options : -n, --number-rows INTEGER : The number of database rows to query. [default: 10] -f, --format TEXT : The format to output the data. Should be one of ['table', 'json', 'dict']. [default: table] -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -v, --verbose : Show a more verbose output. [default: False] --help : Show this message and exit.","title":"sqlcli select"},{"location":"changelog/","text":"Changelog 0.0.1 (2022-01-31) The first release of sqlcli !","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#001-2022-01-31","text":"The first release of sqlcli !","title":"0.0.1 (2022-01-31)"},{"location":"contributing/","text":"Contributing sqlcli welcomes all contributors. If you would like to make a contribution please create a fork of the repository and then submit a pull request. Pull request check list When creating a pull request please ensure you have completed the following: Run the black code formatter ( black sqlcli ). Run pytest ( pytest --forked ). Re-build the docs api reference ( python scripts/docs.py build-typer-docs ). Preview the docs ( mkdocs serve ) Docs The docs are hosted on GitHub pages at: https://samedwardes.github.io/sqlcli/ . When making changes remember to do the following: Rebuild the API reference. python scripts/docs.py build-typer-docs Check how the docs look locally. mkdocs serve Publish to GitHub pages. python scripts/docs.py publish-docs Testing Testing is performed with pytest. When running make sure to pass the --forked so that pytest spins up a \"fresh\" environment for each test. The --forked option comes from pytest-xdist . pytest --forked Credits Open source libraries Like all great open source software sqlcli is built on the shoulders of giants. sqlcli relies heavily on: sqlmodel sqlalchemy typer rich mkdocs-material and many more! See the pyproject.toml for all requirements. Icons and logo Icons are from fontawesome.com . The logo is the terminal icon .","title":"Contributing"},{"location":"contributing/#contributing","text":"sqlcli welcomes all contributors. If you would like to make a contribution please create a fork of the repository and then submit a pull request.","title":"Contributing"},{"location":"contributing/#pull-request-check-list","text":"When creating a pull request please ensure you have completed the following: Run the black code formatter ( black sqlcli ). Run pytest ( pytest --forked ). Re-build the docs api reference ( python scripts/docs.py build-typer-docs ). Preview the docs ( mkdocs serve )","title":"Pull request check list"},{"location":"contributing/#docs","text":"The docs are hosted on GitHub pages at: https://samedwardes.github.io/sqlcli/ . When making changes remember to do the following: Rebuild the API reference. python scripts/docs.py build-typer-docs Check how the docs look locally. mkdocs serve Publish to GitHub pages. python scripts/docs.py publish-docs","title":"Docs"},{"location":"contributing/#testing","text":"Testing is performed with pytest. When running make sure to pass the --forked so that pytest spins up a \"fresh\" environment for each test. The --forked option comes from pytest-xdist . pytest --forked","title":"Testing"},{"location":"contributing/#credits","text":"","title":"Credits"},{"location":"contributing/#open-source-libraries","text":"Like all great open source software sqlcli is built on the shoulders of giants. sqlcli relies heavily on: sqlmodel sqlalchemy typer rich mkdocs-material and many more! See the pyproject.toml for all requirements.","title":"Open source libraries"},{"location":"contributing/#icons-and-logo","text":"Icons are from fontawesome.com . The logo is the terminal icon .","title":"Icons and logo"},{"location":"features/","text":"Features Demo Create a demo database to explore test sqlcli by using the init-demo command: sqlcli init-demo $ sqlcli init-demo \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table: sport \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table: athlete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 how to use the demo database \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 A demo database has been created at: /Users/samedwardes/git/sqlcli/sqlcli_demo/database.db Demo models have been saved to: /Users/samedwardes/git/sqlcli/sqlcli_demo/models.py Here are some example commands to get you started: sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m sqlcli_demo/models.py sqlcli insert -d \"sqlite:///sqlcli_demo/database.db\" -m sqlcli_demo/models.py To avoid passing in the `-d` and -`m` option everytime you can set the following environment variables: export DATABASE_URL=\"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH=\"sqlcli_demo/models.py\" For instructions on how to use the demo database visit https://samedwardes.github.io/sqlcli/tutorial/using-demo-db/. Select Select data from your SQL database using the select command: sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Insert Interactively insert new data using the insert command: sqlcli insert athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli insert athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Set defaults Type less by setting a default database url and models module: export DATABASE_URL = \"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH = \"sqlcli_demo/models.py\" sqlcli select athlete $ sqlcli select athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#demo","text":"Create a demo database to explore test sqlcli by using the init-demo command: sqlcli init-demo $ sqlcli init-demo \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table: sport \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 table: athlete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 how to use the demo database \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 A demo database has been created at: /Users/samedwardes/git/sqlcli/sqlcli_demo/database.db Demo models have been saved to: /Users/samedwardes/git/sqlcli/sqlcli_demo/models.py Here are some example commands to get you started: sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m sqlcli_demo/models.py sqlcli insert -d \"sqlite:///sqlcli_demo/database.db\" -m sqlcli_demo/models.py To avoid passing in the `-d` and -`m` option everytime you can set the following environment variables: export DATABASE_URL=\"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH=\"sqlcli_demo/models.py\" For instructions on how to use the demo database visit https://samedwardes.github.io/sqlcli/tutorial/using-demo-db/.","title":"Demo"},{"location":"features/#select","text":"Select data from your SQL database using the select command: sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Select"},{"location":"features/#insert","text":"Interactively insert new data using the insert command: sqlcli insert athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli insert athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Insert"},{"location":"features/#set-defaults","text":"Type less by setting a default database url and models module: export DATABASE_URL = \"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH = \"sqlcli_demo/models.py\" sqlcli select athlete $ sqlcli select athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Set defaults"},{"location":"tutorial/getting-started/","text":"Installation and Getting Started Installation The first step is to install sqlcli . To install sqlcli run the following command: pip install sqlcli How to run sqlcli sqlcli is a command a tool that is meant to be run through the command line. There are two primary ways you can run it: Option 1 After install sqlcli you will have access to sqlcli command. You can run it in your terminal like any other command line program: sqlcli --help Option 2 You can also run sqlcli by invoking Python: python -m sqlcli --help Both ways produce the exact same result, so use which ever way you prefer. Quick start sqlcli comes with a demo database you can use to explore the program. Run the following commands to get started: sqlcli init-demo sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 name \u2503 sport_id \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 Ronaldo \u2502 1 \u2502 \u2502 2 \u2502 Messi \u2502 1 \u2502 \u2502 3 \u2502 Beckham \u2502 1 \u2502 \u2502 4 \u2502 Gretzky \u2502 2 \u2502 \u2502 5 \u2502 Crosby \u2502 2 \u2502 \u2502 6 \u2502 Ovechkin \u2502 2 \u2502 \u2502 7 \u2502 Sundin \u2502 2 \u2502 \u2502 8 \u2502 Domi \u2502 2 \u2502 \u2502 9 \u2502 Carter \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 For more details please check out the next section Using the demo database .","title":"Installation and Getting Started"},{"location":"tutorial/getting-started/#installation-and-getting-started","text":"","title":"Installation and Getting Started"},{"location":"tutorial/getting-started/#installation","text":"The first step is to install sqlcli . To install sqlcli run the following command: pip install sqlcli","title":"Installation"},{"location":"tutorial/getting-started/#how-to-run-sqlcli","text":"sqlcli is a command a tool that is meant to be run through the command line. There are two primary ways you can run it: Option 1 After install sqlcli you will have access to sqlcli command. You can run it in your terminal like any other command line program: sqlcli --help Option 2 You can also run sqlcli by invoking Python: python -m sqlcli --help Both ways produce the exact same result, so use which ever way you prefer.","title":"How to run sqlcli"},{"location":"tutorial/getting-started/#quick-start","text":"sqlcli comes with a demo database you can use to explore the program. Run the following commands to get started: sqlcli init-demo sqlcli select athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 name \u2503 sport_id \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 Ronaldo \u2502 1 \u2502 \u2502 2 \u2502 Messi \u2502 1 \u2502 \u2502 3 \u2502 Beckham \u2502 1 \u2502 \u2502 4 \u2502 Gretzky \u2502 2 \u2502 \u2502 5 \u2502 Crosby \u2502 2 \u2502 \u2502 6 \u2502 Ovechkin \u2502 2 \u2502 \u2502 7 \u2502 Sundin \u2502 2 \u2502 \u2502 8 \u2502 Domi \u2502 2 \u2502 \u2502 9 \u2502 Carter \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 For more details please check out the next section Using the demo database .","title":"Quick start"},{"location":"tutorial/inserting-data/","text":"Writing data with insert With sqlcli you can insert data into your database using the command line.. The sqlcli insert command helps you interactively create a new record.. It is similar to the INSERT INTO statement in SQL. # using sqlcli sqlcli insert <TABLE> -- using sql INSERT INTO < TABLE > Set up the demo database To get started, first make sure you have set up the demo database. sqlcli init-demo To avoid having to specify the database and models with each command lets set our two optional environment variables: export DATABASE_URL = \"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH = \"sqlcli_demo/models.py\" Now you are ready to select data from the demo database \ud83d\ude4c Create a new record Creating a new record is as simple as calling: sqlcli insert $ sqlcli insert # Please select a table [ sport/athlete ] :$ athlete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Alternatively, if you knew which table you wanted to insert a record into you could have also called: sqlcli insert athlete Interactive prompt One of the main features of sqlcli is the interactive prompt. sqlcli uses the information from your sqlmodel classes to generate a smart and interactive prompt. When inserting new data into the database sqlcli knows: What is the correct type . For example an integer is required, but a string is input by the user sqlcli will re-prompt you The relationships between tables. When a value is a foreign key to another table sqlcli will show you a preview of that table and only allow you to input valid options. In the example below the user tries to enter an invalid input: sqlcli insert athlete $ sqlcli insert # Please select a table [ sport/athlete ] :$ athlete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 50 Please select one of the available options # <class 'int' > ( optional ) [ 1 /2 ] :$ Soccer Please select one of the available options # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Writing data with `insert`"},{"location":"tutorial/inserting-data/#writing-data-with-insert","text":"With sqlcli you can insert data into your database using the command line.. The sqlcli insert command helps you interactively create a new record.. It is similar to the INSERT INTO statement in SQL. # using sqlcli sqlcli insert <TABLE> -- using sql INSERT INTO < TABLE >","title":"Writing data with insert"},{"location":"tutorial/inserting-data/#set-up-the-demo-database","text":"To get started, first make sure you have set up the demo database. sqlcli init-demo To avoid having to specify the database and models with each command lets set our two optional environment variables: export DATABASE_URL = \"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH = \"sqlcli_demo/models.py\" Now you are ready to select data from the demo database \ud83d\ude4c","title":"Set up the demo database"},{"location":"tutorial/inserting-data/#create-a-new-record","text":"Creating a new record is as simple as calling: sqlcli insert $ sqlcli insert # Please select a table [ sport/athlete ] :$ athlete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Alternatively, if you knew which table you wanted to insert a record into you could have also called: sqlcli insert athlete","title":"Create a new record"},{"location":"tutorial/inserting-data/#interactive-prompt","text":"One of the main features of sqlcli is the interactive prompt. sqlcli uses the information from your sqlmodel classes to generate a smart and interactive prompt. When inserting new data into the database sqlcli knows: What is the correct type . For example an integer is required, but a string is input by the user sqlcli will re-prompt you The relationships between tables. When a value is a foreign key to another table sqlcli will show you a preview of that table and only allow you to input valid options. In the example below the user tries to enter an invalid input: sqlcli insert athlete $ sqlcli insert # Please select a table [ sport/athlete ] :$ athlete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 50 Please select one of the available options # <class 'int' > ( optional ) [ 1 /2 ] :$ Soccer Please select one of the available options # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Interactive prompt"},{"location":"tutorial/reading-data/","text":"Reading data with select With sqlcli you can read data from your database in the command line. The sqlcli select command lets you select any table from your database. It is similar to the SELECT statement in SQL. # using sqlcli sqlcli select <TABLE> -- using sql SELECT * FROM < TABLE > Set up the demo database To get started, first make sure you have set up the demo database. sqlcli init-demo To avoid having to specify the database and models with each command lets set our two optional environment variables: export DATABASE_URL = \"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH = \"sqlcli_demo/models.py\" Now you are ready to select data from the demo database \ud83d\ude4c First, try selecting some data from the athlete table. The select command takes an optional argument for the name of the table. sqlcli select athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Nice! The table printed out to the console in an easy to read format. Formats The select command also lets you specify different formats. The default format is 'table' which looks like the output above. You can also specify 'json' , or 'dict' . json sqlcli select athlete --format json -n 3 { \"athlete\" : [ { \"id\" : 1 , \"sport_id\" : 1 , \"name\" : \"Ronaldo\" }, { \"id\" : 2 , \"sport_id\" : 1 , \"name\" : \"Messi\" }, { \"id\" : 3 , \"sport_id\" : 1 , \"name\" : \"Beckham\" } ] } The json format can be useful if you want to pipe the results into another command. For example we can write the json data to a file named data.json . sqlcli select athlete --format json -n 3 > data.json cat data.json { \"athlete\" : [ { \"id\" : 1 , \"sport_id\" : 1 , \"name\" : \"Ronaldo\" } , { \"id\" : 2 , \"sport_id\" : 1 , \"name\" : \"Messi\" } , { \"id\" : 3 , \"sport_id\" : 1 , \"name\" : \"Beckham\" } ] }","title":"Reading data with `select`"},{"location":"tutorial/reading-data/#reading-data-with-select","text":"With sqlcli you can read data from your database in the command line. The sqlcli select command lets you select any table from your database. It is similar to the SELECT statement in SQL. # using sqlcli sqlcli select <TABLE> -- using sql SELECT * FROM < TABLE >","title":"Reading data with select"},{"location":"tutorial/reading-data/#set-up-the-demo-database","text":"To get started, first make sure you have set up the demo database. sqlcli init-demo To avoid having to specify the database and models with each command lets set our two optional environment variables: export DATABASE_URL = \"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH = \"sqlcli_demo/models.py\" Now you are ready to select data from the demo database \ud83d\ude4c First, try selecting some data from the athlete table. The select command takes an optional argument for the name of the table. sqlcli select athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Nice! The table printed out to the console in an easy to read format.","title":"Set up the demo database"},{"location":"tutorial/reading-data/#formats","text":"The select command also lets you specify different formats. The default format is 'table' which looks like the output above. You can also specify 'json' , or 'dict' .","title":"Formats"},{"location":"tutorial/reading-data/#json","text":"sqlcli select athlete --format json -n 3 { \"athlete\" : [ { \"id\" : 1 , \"sport_id\" : 1 , \"name\" : \"Ronaldo\" }, { \"id\" : 2 , \"sport_id\" : 1 , \"name\" : \"Messi\" }, { \"id\" : 3 , \"sport_id\" : 1 , \"name\" : \"Beckham\" } ] } The json format can be useful if you want to pipe the results into another command. For example we can write the json data to a file named data.json . sqlcli select athlete --format json -n 3 > data.json cat data.json { \"athlete\" : [ { \"id\" : 1 , \"sport_id\" : 1 , \"name\" : \"Ronaldo\" } , { \"id\" : 2 , \"sport_id\" : 1 , \"name\" : \"Messi\" } , { \"id\" : 3 , \"sport_id\" : 1 , \"name\" : \"Beckham\" } ] }","title":"json"},{"location":"tutorial/using-demo-db/","text":"Using the demo database For sqlcli to be useful you need two things: database SQLModel object(s) Luckily, sqlcli comes with a built in command to spin up a small SQLite database and a python file with SQLModel classes you can using for experimenting. Set up To get started, lets first create a new directory you can use to experiment with sqlcli . mkdir demo cd demo Then, run the init-demo command to create the SQLite database and a python file that contains the SQLModel definitions. sqlcli init-demo This will create a new sqlite database on your computer and the related SQLModel classes that you can then use to test sqlcli . The command will output two new files in your working directory: sqlcli_demo \u251c\u2500\u2500 database.db # A sqlite database with demo data. \u2514\u2500\u2500 models.py # SQLModel classes that map to the demo database. With these two files you have everything you need to start working with sqlcli \ud83c\udf89. The demo models are defined as follows: sqlcli_demo/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from typing import List , Optional from sqlmodel import Field , Relationship , SQLModel class Sport ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str athletes : List [ \"Athlete\" ] = Relationship ( back_populates = \"sport\" ) class Athlete ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str sport_id : Optional [ int ] = Field ( default = None , foreign_key = \"sport.id\" ) sport : Optional [ Sport ] = Relationship ( back_populates = \"athletes\" ) Explore the database Now with your database in place and your models defined you will be able to play with sqlcli ! Lets try a few different commands and see what happens. sqlcli select The select command is similar to SELECT * FROM <TABLE> in SQL. You can use it to view your data. sqlcli select -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli select -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" # Please select a table [ sport/athlete ] :$ athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 name \u2503 sport_id \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 Ronaldo \u2502 1 \u2502 \u2502 2 \u2502 Messi \u2502 1 \u2502 \u2502 3 \u2502 Beckham \u2502 1 \u2502 \u2502 4 \u2502 Gretzky \u2502 2 \u2502 \u2502 5 \u2502 Crosby \u2502 2 \u2502 \u2502 6 \u2502 Ovechkin \u2502 2 \u2502 \u2502 7 \u2502 Sundin \u2502 2 \u2502 \u2502 8 \u2502 Domi \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Because you defined your models in the sqlcli_demo/models.py file sqlcli knows the tables that are in your database and will automatically prompt you to choose of the tables. Sometimes you may already know the name of your table. In that case, you can pass the name of the table to the select command as an argument. sqlcli select sport -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli select sport -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 sqlcli insert The insert command is similar to INSERT INTO <TABLE> from SQL. You can use it to add new records to your database. Just like with the select command you can optionally specify the name of the table if you already know it. Try it out! sqlcli insert athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli insert athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Because you defined your models using SQLModel sqlcli already knows a lot about your database. You will be prompted to enter a new value for each record attribute: Optional attributes are not required. Foreign keys will only accept valid options and will give your a preview of the possible options. Types are automatically enforced (e.g. integers must be integers). Setting up environment variables It can be annoying to specify the database URL and SQLModel modules every time. To avoid this you can set two environment variables the sqlcli will default to: export DATABASE_URL = \"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH = \"sqlcli_demo/models.py\" Now you can call the same commands but without specifying the -d and -m options: sqlcli select athlete $ sqlcli select athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2502 9 \u2502 1 \u2502 Carter \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 sqlcli select sport $ sqlcli select sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 sqlcli insert athlete $ sqlcli insert athlete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Using the demo database"},{"location":"tutorial/using-demo-db/#using-the-demo-database","text":"For sqlcli to be useful you need two things: database SQLModel object(s) Luckily, sqlcli comes with a built in command to spin up a small SQLite database and a python file with SQLModel classes you can using for experimenting.","title":"Using the demo database"},{"location":"tutorial/using-demo-db/#set-up","text":"To get started, lets first create a new directory you can use to experiment with sqlcli . mkdir demo cd demo Then, run the init-demo command to create the SQLite database and a python file that contains the SQLModel definitions. sqlcli init-demo This will create a new sqlite database on your computer and the related SQLModel classes that you can then use to test sqlcli . The command will output two new files in your working directory: sqlcli_demo \u251c\u2500\u2500 database.db # A sqlite database with demo data. \u2514\u2500\u2500 models.py # SQLModel classes that map to the demo database. With these two files you have everything you need to start working with sqlcli \ud83c\udf89. The demo models are defined as follows: sqlcli_demo/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from typing import List , Optional from sqlmodel import Field , Relationship , SQLModel class Sport ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str athletes : List [ \"Athlete\" ] = Relationship ( back_populates = \"sport\" ) class Athlete ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str sport_id : Optional [ int ] = Field ( default = None , foreign_key = \"sport.id\" ) sport : Optional [ Sport ] = Relationship ( back_populates = \"athletes\" )","title":"Set up"},{"location":"tutorial/using-demo-db/#explore-the-database","text":"Now with your database in place and your models defined you will be able to play with sqlcli ! Lets try a few different commands and see what happens.","title":"Explore the database"},{"location":"tutorial/using-demo-db/#sqlcli-select","text":"The select command is similar to SELECT * FROM <TABLE> in SQL. You can use it to view your data. sqlcli select -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli select -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" # Please select a table [ sport/athlete ] :$ athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 name \u2503 sport_id \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 Ronaldo \u2502 1 \u2502 \u2502 2 \u2502 Messi \u2502 1 \u2502 \u2502 3 \u2502 Beckham \u2502 1 \u2502 \u2502 4 \u2502 Gretzky \u2502 2 \u2502 \u2502 5 \u2502 Crosby \u2502 2 \u2502 \u2502 6 \u2502 Ovechkin \u2502 2 \u2502 \u2502 7 \u2502 Sundin \u2502 2 \u2502 \u2502 8 \u2502 Domi \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Because you defined your models in the sqlcli_demo/models.py file sqlcli knows the tables that are in your database and will automatically prompt you to choose of the tables. Sometimes you may already know the name of your table. In that case, you can pass the name of the table to the select command as an argument. sqlcli select sport -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli select sport -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"sqlcli select"},{"location":"tutorial/using-demo-db/#sqlcli-insert","text":"The insert command is similar to INSERT INTO <TABLE> from SQL. You can use it to add new records to your database. Just like with the select command you can optionally specify the name of the table if you already know it. Try it out! sqlcli insert athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" $ sqlcli insert athlete -d \"sqlite:///sqlcli_demo/database.db\" -m \"sqlcli_demo/models.py\" \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Because you defined your models using SQLModel sqlcli already knows a lot about your database. You will be prompted to enter a new value for each record attribute: Optional attributes are not required. Foreign keys will only accept valid options and will give your a preview of the possible options. Types are automatically enforced (e.g. integers must be integers).","title":"sqlcli insert"},{"location":"tutorial/using-demo-db/#setting-up-environment-variables","text":"It can be annoying to specify the database URL and SQLModel modules every time. To avoid this you can set two environment variables the sqlcli will default to: export DATABASE_URL = \"sqlite:///sqlcli_demo/database.db\" export MODELS_PATH = \"sqlcli_demo/models.py\" Now you can call the same commands but without specifying the -d and -m options: sqlcli select athlete $ sqlcli select athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2502 9 \u2502 1 \u2502 Carter \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 sqlcli select sport $ sqlcli select sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 sqlcli insert athlete $ sqlcli insert athlete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'int' > ( optional ) :$ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `name` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # <class 'str' >:$ Carter \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 column: `sport_id` \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The column `sport_id` is a foreign key related to the `sport` table. Please select from one of the options below from the `id` column: sport \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2513 \u2503 name \u2503 id \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2529 \u2502 Soccer \u2502 1 \u2502 \u2502 Hockey \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # <class 'int' > ( optional ) [ 1 /2 ] :$ 1 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 New row successfully added \ud83c\udf89 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 {'id': 9, 'sport_id': 1, 'name': 'Carter'} \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Setting up environment variables"}]}