{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"sqlcli A command line interface (CLI) for interacting with SQLModel. Source code: https://github.com/SamEdwardes/sqlcli Docs: https://samedwardes.github.io/sqlcli/ PyPi: https://pypi.org/project/sqlcli/ Installation You can install sqlcli using pip: pip install sqlcli This will make the sqlcli command available in your python environment. Usage The quickest way to get started with sqlcli is to create a demo sqlite database: sqlcli init-demo This will create a small sqlite database on your computer. The you can use sqlcli to explore your database. sqlcli select athlete --database-url \"sqlite:///demo_database.db\" --models-module \"demo_models.py\"","title":"Home"},{"location":"#sqlcli","text":"A command line interface (CLI) for interacting with SQLModel. Source code: https://github.com/SamEdwardes/sqlcli Docs: https://samedwardes.github.io/sqlcli/ PyPi: https://pypi.org/project/sqlcli/","title":"sqlcli"},{"location":"#installation","text":"You can install sqlcli using pip: pip install sqlcli This will make the sqlcli command available in your python environment.","title":"Installation"},{"location":"#usage","text":"The quickest way to get started with sqlcli is to create a demo sqlite database: sqlcli init-demo This will create a small sqlite database on your computer. The you can use sqlcli to explore your database. sqlcli select athlete --database-url \"sqlite:///demo_database.db\" --models-module \"demo_models.py\"","title":"Usage"},{"location":"changelog/","text":"Changelog 0.0.1 (2022-01-01) The first release of sqlcli .","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#001-2022-01-01","text":"The first release of sqlcli .","title":"0.0.1 (2022-01-01)"},{"location":"contributing/","text":"Contributing Docs The docs are hosted on GitHub pages at: https://samedwardes.github.io/sqlcli/ . When making changes remember to do the following: Rebuild the API reference. python scripts/docs.py build-typer-docs Check how the docs look locally. mkdocs serve Publish to GitHub pages. python scripts/docs.py publish-docs Credits Open source libraries Like all great open source software sqlcli is built on the shoulders of giants. sqlcli relies heavily on: sqlmodel sqlalchemy typer rich mkdocs-material and many more! See the pyproject.toml for all requirements. Icons and logo Icons are from fontawesome.com . The logo is the terminal icon .","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#docs","text":"The docs are hosted on GitHub pages at: https://samedwardes.github.io/sqlcli/ . When making changes remember to do the following: Rebuild the API reference. python scripts/docs.py build-typer-docs Check how the docs look locally. mkdocs serve Publish to GitHub pages. python scripts/docs.py publish-docs","title":"Docs"},{"location":"contributing/#credits","text":"","title":"Credits"},{"location":"contributing/#open-source-libraries","text":"Like all great open source software sqlcli is built on the shoulders of giants. sqlcli relies heavily on: sqlmodel sqlalchemy typer rich mkdocs-material and many more! See the pyproject.toml for all requirements.","title":"Open source libraries"},{"location":"contributing/#icons-and-logo","text":"Icons are from fontawesome.com . The logo is the terminal icon .","title":"Icons and logo"},{"location":"api/_typer-cli-auto-docs/","text":"main A command line interface (CLI) for interacting with SQLModel. Usage : $ main [ OPTIONS ] COMMAND [ ARGS ] ... Options : --version : Show the installed version. [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. docs : Open the docs:... drop-all : Drop a database. hello-world init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. inspect : Inspect a SQLModel with rich.inspect. select : Query the database. main create-all Create a database. The equivalent to calling SQLModel.metadata.create_all(engine) . Usage : $ main create-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit. main docs Open the docs: https://samedwardes.github.io/sqlcli/ Usage : $ main docs [ OPTIONS ] Options : --help : Show this message and exit. main drop-all Drop a database. The equivalent to calling SQLModel.metadata.drop_all(engine) . Usage : $ main drop-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -y : Danger! Skip the prompt and drop the database. This cannot be undone. [default: False] --help : Show this message and exit. main hello-world Usage : $ main hello-world [ OPTIONS ] Options : --help : Show this message and exit. main init-demo Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Usage : $ main init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database [default: .] --clear / --no-clear : Remove all of the demo database related data including demo_models.py and demo_database.db . [default: False] --help : Show this message and exit. main insert Insert a new record into the database. Usage : $ main insert [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit. main inspect Inspect a SQLModel with rich.inspect. Usage : $ main inspect [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit. main select Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] . Usage : $ main select [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -n, --number-rows INTEGER : The number of database rows to query. [default: 10] -f, --format TEXT : The format to output the data. Should be one of [None, 'json', 'dict', 'table'] [default: table] -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -v, --verbose : Show a more verbose output. [default: False] --help : Show this message and exit.","title":"`main`"},{"location":"api/_typer-cli-auto-docs/#main","text":"A command line interface (CLI) for interacting with SQLModel. Usage : $ main [ OPTIONS ] COMMAND [ ARGS ] ... Options : --version : Show the installed version. [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. docs : Open the docs:... drop-all : Drop a database. hello-world init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. inspect : Inspect a SQLModel with rich.inspect. select : Query the database.","title":"main"},{"location":"api/_typer-cli-auto-docs/#main-create-all","text":"Create a database. The equivalent to calling SQLModel.metadata.create_all(engine) . Usage : $ main create-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit.","title":"main create-all"},{"location":"api/_typer-cli-auto-docs/#main-docs","text":"Open the docs: https://samedwardes.github.io/sqlcli/ Usage : $ main docs [ OPTIONS ] Options : --help : Show this message and exit.","title":"main docs"},{"location":"api/_typer-cli-auto-docs/#main-drop-all","text":"Drop a database. The equivalent to calling SQLModel.metadata.drop_all(engine) . Usage : $ main drop-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -y : Danger! Skip the prompt and drop the database. This cannot be undone. [default: False] --help : Show this message and exit.","title":"main drop-all"},{"location":"api/_typer-cli-auto-docs/#main-hello-world","text":"Usage : $ main hello-world [ OPTIONS ] Options : --help : Show this message and exit.","title":"main hello-world"},{"location":"api/_typer-cli-auto-docs/#main-init-demo","text":"Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Usage : $ main init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database [default: .] --clear / --no-clear : Remove all of the demo database related data including demo_models.py and demo_database.db . [default: False] --help : Show this message and exit.","title":"main init-demo"},{"location":"api/_typer-cli-auto-docs/#main-insert","text":"Insert a new record into the database. Usage : $ main insert [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit.","title":"main insert"},{"location":"api/_typer-cli-auto-docs/#main-inspect","text":"Inspect a SQLModel with rich.inspect. Usage : $ main inspect [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit.","title":"main inspect"},{"location":"api/_typer-cli-auto-docs/#main-select","text":"Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] . Usage : $ main select [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -n, --number-rows INTEGER : The number of database rows to query. [default: 10] -f, --format TEXT : The format to output the data. Should be one of [None, 'json', 'dict', 'table'] [default: table] -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -v, --verbose : Show a more verbose output. [default: False] --help : Show this message and exit.","title":"main select"},{"location":"api/api-reference/","text":"API Reference main A command line interface (CLI) for interacting with SQLModel. Usage : $ main [ OPTIONS ] COMMAND [ ARGS ] ... Options : --version : Show the installed version. [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. docs : Open the docs:... drop-all : Drop a database. hello-world init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. inspect : Inspect a SQLModel with rich.inspect. select : Query the database. main create-all Create a database. The equivalent to calling SQLModel.metadata.create_all(engine) . Usage : $ main create-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit. main docs Open the docs: https://samedwardes.github.io/sqlcli/ Usage : $ main docs [ OPTIONS ] Options : --help : Show this message and exit. main drop-all Drop a database. The equivalent to calling SQLModel.metadata.drop_all(engine) . Usage : $ main drop-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -y : Danger! Skip the prompt and drop the database. This cannot be undone. [default: False] --help : Show this message and exit. main hello-world Usage : $ main hello-world [ OPTIONS ] Options : --help : Show this message and exit. main init-demo Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Usage : $ main init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database [default: .] --clear / --no-clear : Remove all of the demo database related data including demo_models.py and demo_database.db . [default: False] --help : Show this message and exit. main insert Insert a new record into the database. Usage : $ main insert [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit. main inspect Inspect a SQLModel with rich.inspect. Usage : $ main inspect [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit. main select Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] . Usage : $ main select [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -n, --number-rows INTEGER : The number of database rows to query. [default: 10] -f, --format TEXT : The format to output the data. Should be one of [None, 'json', 'dict', 'table'] [default: table] -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -v, --verbose : Show a more verbose output. [default: False] --help : Show this message and exit.","title":"API Reference"},{"location":"api/api-reference/#api-reference","text":"","title":"API Reference"},{"location":"api/api-reference/#main","text":"A command line interface (CLI) for interacting with SQLModel. Usage : $ main [ OPTIONS ] COMMAND [ ARGS ] ... Options : --version : Show the installed version. [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : create-all : Create a database. docs : Open the docs:... drop-all : Drop a database. hello-world init-demo : Create a demo database for exploring sqlcli. insert : Insert a new record into the database. inspect : Inspect a SQLModel with rich.inspect. select : Query the database.","title":"main"},{"location":"api/api-reference/#main-create-all","text":"Create a database. The equivalent to calling SQLModel.metadata.create_all(engine) . Usage : $ main create-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit.","title":"main create-all"},{"location":"api/api-reference/#main-docs","text":"Open the docs: https://samedwardes.github.io/sqlcli/ Usage : $ main docs [ OPTIONS ] Options : --help : Show this message and exit.","title":"main docs"},{"location":"api/api-reference/#main-drop-all","text":"Drop a database. The equivalent to calling SQLModel.metadata.drop_all(engine) . Usage : $ main drop-all [ OPTIONS ] Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -y : Danger! Skip the prompt and drop the database. This cannot be undone. [default: False] --help : Show this message and exit.","title":"main drop-all"},{"location":"api/api-reference/#main-hello-world","text":"Usage : $ main hello-world [ OPTIONS ] Options : --help : Show this message and exit.","title":"main hello-world"},{"location":"api/api-reference/#main-init-demo","text":"Create a demo database for exploring sqlcli. Create a demo sqlite database to test with sqlcli. Usage : $ main init-demo [ OPTIONS ] Options : --path TEXT : The path to save the demo database [default: .] --clear / --no-clear : Remove all of the demo database related data including demo_models.py and demo_database.db . [default: False] --help : Show this message and exit.","title":"main init-demo"},{"location":"api/api-reference/#main-insert","text":"Insert a new record into the database. Usage : $ main insert [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit.","title":"main insert"},{"location":"api/api-reference/#main-inspect","text":"Inspect a SQLModel with rich.inspect. Usage : $ main inspect [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . --help : Show this message and exit.","title":"main inspect"},{"location":"api/api-reference/#main-select","text":"Query the database. Query the database to see the data inside a given table. Calling sqlcli select is similar to calling SELECT * FROM [table] . Usage : $ main select [ OPTIONS ] [ TABLE_NAME ] Arguments : [TABLE_NAME] : The name of the table to query. Options : -n, --number-rows INTEGER : The number of database rows to query. [default: 10] -f, --format TEXT : The format to output the data. Should be one of [None, 'json', 'dict', 'table'] [default: table] -d, --database-url TEXT : A database connection string. If no connection string is provided sqlcli willcheck for a connection string in the environment variable DATABASE_URL . -m, --models-path TEXT : The location of the python script(s) that contain the SQLModels. If no argumentis provided sqlcli will check for a path in the environment variable MODELS_PATH . -v, --verbose : Show a more verbose output. [default: False] --help : Show this message and exit.","title":"main select"},{"location":"tutorial/getting-started/","text":"Installation and Getting Started Installation ....","title":"Installation and Getting Started"},{"location":"tutorial/getting-started/#installation-and-getting-started","text":"","title":"Installation and Getting Started"},{"location":"tutorial/getting-started/#installation","text":"....","title":"Installation"},{"location":"tutorial/inserting-data/","text":"","title":"Inserting data"},{"location":"tutorial/reading-data/","text":"Reading data With sqlcli you can read data from your database in the command line. The sqlcli select command lets you select any table from your database. Set up the demo database To get started, first make sure you have set up the demo database. sqlcli init-demo To avoid having to specify the database and models with each command lets set our two optional environment variables: export DATABASE_URL = \"sqlite:///demo_database.db\" export MODELS_PATH = \"demo_models.py\" Now you are ready to select data from the demo database \ud83d\ude4c First, try selecting some data from the athlete table. The select command takes an optional argument for the name of the table. sqlcli select athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Nice! The table printed out to the console in an easy to read format. Formats The select command also lets you specify different formats. The default format is 'table' which looks like the output above. You can also specify 'json' , or 'dict' . json sqlcli select athlete --format json -n 3 { \"athlete\" : [ { \"id\" : 1 , \"sport_id\" : 1 , \"name\" : \"Ronaldo\" }, { \"id\" : 2 , \"sport_id\" : 1 , \"name\" : \"Messi\" }, { \"id\" : 3 , \"sport_id\" : 1 , \"name\" : \"Beckham\" } ] } The json format can be useful if you want to pipe the results into another command. For example we can write the json data to a file named data.json . sqlcli select athlete --format json -n 3 > data.json cat data.json { \"athlete\" : [ { \"id\" : 1 , \"sport_id\" : 1 , \"name\" : \"Ronaldo\" } , { \"id\" : 2 , \"sport_id\" : 1 , \"name\" : \"Messi\" } , { \"id\" : 3 , \"sport_id\" : 1 , \"name\" : \"Beckham\" } ] }","title":"Reading data"},{"location":"tutorial/reading-data/#reading-data","text":"With sqlcli you can read data from your database in the command line. The sqlcli select command lets you select any table from your database.","title":"Reading data"},{"location":"tutorial/reading-data/#set-up-the-demo-database","text":"To get started, first make sure you have set up the demo database. sqlcli init-demo To avoid having to specify the database and models with each command lets set our two optional environment variables: export DATABASE_URL = \"sqlite:///demo_database.db\" export MODELS_PATH = \"demo_models.py\" Now you are ready to select data from the demo database \ud83d\ude4c First, try selecting some data from the athlete table. The select command takes an optional argument for the name of the table. sqlcli select athlete \u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 id \u2503 sport_id \u2503 name \u2503 \u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 1 \u2502 1 \u2502 Ronaldo \u2502 \u2502 2 \u2502 1 \u2502 Messi \u2502 \u2502 3 \u2502 1 \u2502 Beckham \u2502 \u2502 4 \u2502 2 \u2502 Gretzky \u2502 \u2502 5 \u2502 2 \u2502 Crosby \u2502 \u2502 6 \u2502 2 \u2502 Ovechkin \u2502 \u2502 7 \u2502 2 \u2502 Sundin \u2502 \u2502 8 \u2502 2 \u2502 Domi \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Nice! The table printed out to the console in an easy to read format.","title":"Set up the demo database"},{"location":"tutorial/reading-data/#formats","text":"The select command also lets you specify different formats. The default format is 'table' which looks like the output above. You can also specify 'json' , or 'dict' .","title":"Formats"},{"location":"tutorial/reading-data/#json","text":"sqlcli select athlete --format json -n 3 { \"athlete\" : [ { \"id\" : 1 , \"sport_id\" : 1 , \"name\" : \"Ronaldo\" }, { \"id\" : 2 , \"sport_id\" : 1 , \"name\" : \"Messi\" }, { \"id\" : 3 , \"sport_id\" : 1 , \"name\" : \"Beckham\" } ] } The json format can be useful if you want to pipe the results into another command. For example we can write the json data to a file named data.json . sqlcli select athlete --format json -n 3 > data.json cat data.json { \"athlete\" : [ { \"id\" : 1 , \"sport_id\" : 1 , \"name\" : \"Ronaldo\" } , { \"id\" : 2 , \"sport_id\" : 1 , \"name\" : \"Messi\" } , { \"id\" : 3 , \"sport_id\" : 1 , \"name\" : \"Beckham\" } ] }","title":"json"},{"location":"tutorial/using-demo-db/","text":"Using the demo database To work with the demo database first make sure you have run the command: sqlcli init-demo This will create a new sqlite database on your computer and the related SQLModel classes that you can then use to test sqlcli . The command will output two new files in your working directory: demo_database.db # A sqlite database with demo data. demo_models.py # SQLModel classes that map to the demo database. The demo models are defined as follows: demo_models.py from typing import List , Optional from sqlmodel import Field , Relationship , SQLModel class Sport ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str athletes : List [ \"Athlete\" ] = Relationship ( back_populates = \"sport\" ) class Athlete ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str sport_id : Optional [ int ] = Field ( default = None , foreign_key = \"sport.id\" ) sport : Optional [ Sport ] = Relationship ( back_populates = \"athletes\" ) def create_demo_data (): data = [ Sport ( name = \"Soccer\" , athletes = [ Athlete ( name = \"Ronaldo\" ), Athlete ( name = \"Messi\" ), Athlete ( name = \"Beckham\" ), ] ), Sport ( name = \"Hockey\" , athletes = [ Athlete ( name = \"Gretzky\" ), Athlete ( name = \"Crosby\" ), Athlete ( name = \"Ovechkin\" ), Athlete ( name = \"Sundin\" ), Athlete ( name = \"Domi\" ), ] ) ] return data Now with your database in place and your models defined you will be able to play with sqlcli ! sqlcli select athlete -d \"sqlite:///demo_database.db\" -m \"demo_models.py\" sqlcli select sport -d \"sqlite:///demo_database.db\" -m \"demo_models.py\" sqlcli insert athlete -d \"sqlite:///demo_database.db\" -m \"demo_models.py\" It can be annoying to specify the database URL and SQLModel modules every time. To avoid this you can set two environment variables the sqlcli will default to: export DATABASE_URL = \"sqlite:///demo_database.db\" export MODELS_PATH = \"tests/models/sports.py Now you can call the same commands but without specifying the -d and -m options: sqlcli select athlete sqlcli select sport sqlcli insert athlete","title":"Using the demo database"},{"location":"tutorial/using-demo-db/#using-the-demo-database","text":"To work with the demo database first make sure you have run the command: sqlcli init-demo This will create a new sqlite database on your computer and the related SQLModel classes that you can then use to test sqlcli . The command will output two new files in your working directory: demo_database.db # A sqlite database with demo data. demo_models.py # SQLModel classes that map to the demo database. The demo models are defined as follows: demo_models.py from typing import List , Optional from sqlmodel import Field , Relationship , SQLModel class Sport ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str athletes : List [ \"Athlete\" ] = Relationship ( back_populates = \"sport\" ) class Athlete ( SQLModel , table = True ): id : Optional [ int ] = Field ( default = None , primary_key = True ) name : str sport_id : Optional [ int ] = Field ( default = None , foreign_key = \"sport.id\" ) sport : Optional [ Sport ] = Relationship ( back_populates = \"athletes\" ) def create_demo_data (): data = [ Sport ( name = \"Soccer\" , athletes = [ Athlete ( name = \"Ronaldo\" ), Athlete ( name = \"Messi\" ), Athlete ( name = \"Beckham\" ), ] ), Sport ( name = \"Hockey\" , athletes = [ Athlete ( name = \"Gretzky\" ), Athlete ( name = \"Crosby\" ), Athlete ( name = \"Ovechkin\" ), Athlete ( name = \"Sundin\" ), Athlete ( name = \"Domi\" ), ] ) ] return data Now with your database in place and your models defined you will be able to play with sqlcli ! sqlcli select athlete -d \"sqlite:///demo_database.db\" -m \"demo_models.py\" sqlcli select sport -d \"sqlite:///demo_database.db\" -m \"demo_models.py\" sqlcli insert athlete -d \"sqlite:///demo_database.db\" -m \"demo_models.py\" It can be annoying to specify the database URL and SQLModel modules every time. To avoid this you can set two environment variables the sqlcli will default to: export DATABASE_URL = \"sqlite:///demo_database.db\" export MODELS_PATH = \"tests/models/sports.py Now you can call the same commands but without specifying the -d and -m options: sqlcli select athlete sqlcli select sport sqlcli insert athlete","title":"Using the demo database"}]}